// secrets.h.example - Working example with minimal configuration
// Copy this file to secrets.h and update the 4 values below

#ifndef SECRETS_H
#define SECRETS_H

// ===================================================================
// 🚀 MINIMAL CONFIGURATION - ONLY 4 VALUES NEEDED TO START!
// ===================================================================

// WiFi Network (REQUIRED)
const char* WIFI_SSID = "MyHomeWiFi";                  // Your WiFi network name
const char* WIFI_PASSWORD = "mypassword123";           // Your WiFi password

// Telegram Bot (REQUIRED)
const char* BOT_TOKEN = "1234567890:ABCdefGHIjklMNOpqrSTUvwxYZ123456789";  // Get from @BotFather
const char* CHAT_ID = "123456789";                     // Your chat ID (number)

// ===================================================================
// 🔧 ADVANCED CONFIGURATION (OPTIONAL - LEAVE AS DEFAULT)
// ===================================================================

// Backup WiFi Networks (optional)
const char* BACKUP_WIFI_SSID = "";                     // Leave empty "" to disable
const char* BACKUP_WIFI_PASSWORD = "";                 // Leave empty "" to disable

// WiFi Network Priorities (1 = highest priority)
struct WiFiNetwork {
    const char* ssid;
    const char* password;
    int priority;
    bool enabled;
};

const WiFiNetwork WIFI_NETWORKS[] = {
    {WIFI_SSID, WIFI_PASSWORD, 1, true},                    // Primary network
    {BACKUP_WIFI_SSID, BACKUP_WIFI_PASSWORD, 2, false},     // Backup network
    {"", "", 3, false},                                      // Additional network slot
    {"", "", 4, false}                                       // Additional network slot
};
const int WIFI_NETWORK_COUNT = sizeof(WIFI_NETWORKS) / sizeof(WIFI_NETWORKS[0]);

// Multiple Chat Destinations (optional - uses CHAT_ID above if not configured)
struct TelegramChat {
    const char* chat_id;
    const char* name;
    bool motion_alerts;      // Send motion alerts to this chat
    bool status_updates;     // Send status updates to this chat
    bool error_alerts;       // Send error alerts to this chat
    bool admin_commands;     // Allow admin commands from this chat
    bool enabled;
};

const TelegramChat TELEGRAM_CHATS[] = {
    {"", "", true, true, true, true, false},                // Additional chat slot
    {"", "", true, false, true, true, false},               // Additional chat slot
    {"", "", true, false, false, false, false},             // Additional chat slot
    {"", "", false, true, true, true, false}                // Additional chat slot
};
const int TELEGRAM_CHAT_COUNT = sizeof(TELEGRAM_CHATS) / sizeof(TELEGRAM_CHATS[0]);

// Bot Command Authorization (optional - leave empty for no restrictions)
const char* AUTHORIZED_USERS[] = {
    "",               // Leave empty to allow all users
    "",               // Additional authorized user slot
    ""                // Additional authorized user slot
};
const int AUTHORIZED_USER_COUNT = sizeof(AUTHORIZED_USERS) / sizeof(AUTHORIZED_USERS[0]);

// ===================================================================
// DEVICE IDENTIFICATION (OPTIONAL - CAN USE DEFAULTS)
// ===================================================================

// Unique Device Settings (optional - will use defaults if empty)
const char* DEVICE_ID = "ESP32_Motion_Detector";       // Unique identifier for this device
const char* DEVICE_LOCATION = "Motion Sensor";         // Physical location
const char* DEVICE_OWNER = "User";                     // Device owner
const char* CONTACT_INFO = "";                         // Contact information (optional)

// ===================================================================
// 🎯 THAT'S IT! ONLY 4 VALUES ABOVE ARE NEEDED TO START!
//     All settings below are optional and use smart defaults
// ===================================================================

// Validation functions (automatically included)
inline bool isValidChatId(const char* chat_id) {
    return (chat_id != nullptr && strlen(chat_id) > 0 && 
           (chat_id[0] == '-' || (chat_id[0] >= '0' && chat_id[0] <= '9')));
}

inline bool isValidBotToken(const char* token) {
    return (token != nullptr && strlen(token) > 20 && strchr(token, ':') != nullptr);
}

inline bool isValidWiFiCredentials(const char* ssid, const char* password) {
    return (ssid != nullptr && strlen(ssid) > 0 && strlen(ssid) < 32 &&
            password != nullptr && strlen(password) >= 8 && strlen(password) < 64);
}

#endif // SECRETS_H